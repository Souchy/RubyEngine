/*
 * This source file was generated by the Gradle 'init' task
 */

#include "RubyEngine.h"
#include <util/Math.h>

// flecs::world Ruby::world;
// flecs::query<Transform3d, MeshVao, Material> Ruby::renderables;
// flecs::system Ruby::renderMeshSystem;

std::string RubyEngine::Greeter::greeting() {
    return std::string("Hello, World!");
}

void Ruby::init() {
    // ---------- Systems
    world.set_threads(4);
}

void Ruby::start() {
    auto w = *world.get<std::shared_ptr<Window>>();
    // ---------- Engine loop
    float time = (float)glfwGetTime();
    float delta_time = 1.0f / 60.0f;
    while (!glfwWindowShouldClose(w->m_window) && world.progress(delta_time)) {
        // Compute delta time between two frames
        float new_time = (float)glfwGetTime();
        delta_time = new_time - time;
        time = new_time;
    }
    // ---------- Cleanup
    glfwDestroyWindow(w->m_window);
    glfwTerminate();
    ecs_fini(world.c_ptr());
}
